=head1 partcl

A from scratch implementation of Tcl on Parrot.

To build the tcl compiler, first build parrot and the parrot utilities.
From the top level parrot directory:

 perl Configure.pl && make

Then, type C<make> in I<this> directory. This will
generate the file C<tcl.pbc> which can then be used to run tcl programs.

 ../../parrot tcl.pbc foo.tcl

You can also generate a faux-executable with C<make tclsh>; You could then
run examples with, e.g.:

 ./tclsh example/bench.tcl

=head2 Interactive tclsh

To run partcl interactively, simply run the faux-executable with no args:

 ./tclsh

or, similarly, the parrot bytecode:
 ../../parrot tcl.pbc

=head2 Command line options

partcl supports two command line options, neither of which are standard Tcl.

=over 4

=item -e

Analagous to perl's C<-e> switch, this option will let you specify tcl
code in the command line, which will then be executed. e.g:

 $ ../../parrot tcl.pbc -e "puts {Hello World}"
 Hello World

You will need to properly quote the tcl to protect it from your shell.

=item --pir

Given this option, partcl will compile the tcl code to PIR, and output
the PIR on STDOUT. This PIR can then be compiled to parrot bytecode, or
run directly through parrot. (Works with C<-e>.).

=back

=head2 Examples

To run an example, change to the C<examples> directory, and type C<make>
for instructions.

=head2 Test Suite

To run the test suite, type C<make test>. If any tests fail, try
C<TEST_PROG_ARGS=-G make test>, which will disable parrot's garbage
collection system. Send the results of both to the mailing list
C<parrot-porters@perl.org>.

To run the spec test suites, type C<make spectest>; This will check out
the tests from tcl's CVS repository for the 8.5.4 release and run them.

=head2 Documentation

See C<docs/> and C<TODO>. Project website at: http://code.google.com/p/partcl/

=cut
