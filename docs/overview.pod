=head1 RUNNING TCL

=head2 Generated Files

When you make Tcl, you're generating several files:

=over 4

=item tclsh

While not included in the C<make all> target, you can C<make tclsh> (or
whatever the executable would be called on your platform), and this will give
you a faux-executable.

=item runtime/tcllib.pbc

This file is used to load all the various commands, ops, etc. into
the appropriate namespaces, as well as declare and register the TCL
compiler for the C<compile> opcode.

This file is then included by F<tcllib.pir> which is compiled to F<tcllib.pbc>.

=item tcl.pbc

This is roughly equivalent to C<tclsh> - It takes the command line arguments
(currently, the name of the file you wish to parse), and reads in the file,
and uses the Tcl library to parse those contents as Tcl. You can also specify
command line options to be used with this bytecode file.

=item src/grammar/expr/pge2past.pir

=item src/grammar/expr/past2pir.pir

=item src/grammar/expr/expression.pir

This C<PIR> files are generated from their corresponding C<.tg> and C<.pg>
files. These grammar files allow us to use PGE's implementation of perl6
rules to more simply specify our parsing rules. We use these rules to handle
both the general parsing for Tcl itself, as well as the sub-"language"
used by expressions in [expr] and elsewhere.

=back

=head2 PMCS

The Tcl PMCs (Parrot Magic Cookies) are the user visible data types. These
live in the C<*.pmc> files in F<src/pmc/>. They are compiled into a
dynamically loadable library which is loaded with the C<.HLL> directive
(HLL stands for High Level Language). Most of the functionality associated
with these PMCS is derived from the base Parrot classes, except as noted below.

=over 4

=item TclString

Scalar string, with an override for the boolean truth values.

=item TclInt

Scalar integer, with an override for various math. (For example, Parrot
Integers automatically promote to float division, while Tcl does not.)

=item TclFloat

Scalar float, with an override of the stringification: Tcl floats are
somewhat unusual compared to other Parrot HLLs in that integer-valued floats
stringify with a trailing C<.0>.

=item TclList

Ordered container, corresponding to values generated by the C<[list]> builtin.
Overrides the default stringification provided by Parrot Arrays.

=item TclArray

Hash like container, corresponding to values created with the C<[array]>
builtin.

=item TclDict

Hash like container, corresponding to values created with the C<[dict]>
builtin. Unlike arrays, dictionaries can nest, having dictionaries as
values; Also, dictionaries act more like TclLists in terms of their
conversion to string and back.

=item TclObject

A virtual type, which is used to provide some shimmer (aka morph) methods
common to all the scalar value types.

=back

=cut
