/*
 *  Copyright (C) 2001-2009, The Parrot Foundation.
 */

#include "pmc/pmc_float.h"
#include "pmc/pmc_string.h"

static INTVAL dynpmc_TclFloat;
static INTVAL dynpmc_TclString;

pmclass TclInt
    dynpmc auto_attrs
    extends Integer
    does    integer
    group   tcl_group
    hll     tcl
    maps    Integer
{

    VTABLE void class_init() {
        dynpmc_TclFloat  = Parrot_pmc_get_type_str(INTERP, CONST_STRING(INTERP, "TclFloat"));
        dynpmc_TclString = Parrot_pmc_get_type_str(INTERP, CONST_STRING(INTERP, "TclString"));
    }

    VTABLE void set_number_native(FLOATVAL value) {
        Parrot_pmc_reuse(INTERP, SELF, dynpmc_TclFloat, 0);
        SETATTR_Float_fv(INTERP, SELF, value);
    }


    VTABLE void set_string_native(STRING *value) {
        Parrot_pmc_reuse(INTERP, SELF, dynpmc_TclString, 0);
        SETATTR_String_str_val(INTERP, SELF, Parrot_str_copy(INTERP, value));
    }

    /*
     * TclInt shouldn't automatically promote division to float;
     *  also, explicitly use floor when dividing.
     */
    MULTI PMC *divide(Integer *value, PMC* dest) {
        FLOATVAL d = VTABLE_get_number(INTERP, value);

        if (d == 0)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_DIV_BY_ZERO,
                "divide by zero");

        if (!dest)
            dest = Parrot_pmc_new(INTERP, SELF->vtable->base_type);

        VTABLE_set_integer_native(INTERP, dest, floor(SELF.get_integer() / d));
        return dest;
    }

    /*
     * Workaround for bug #1811 when "div TclInt, TclFloat" dispatched
     * to Integer.divide(DEFAULT).
     */
    MULTI PMC *divide(DEFAULT *value, PMC* dest) {
        FLOATVAL d = VTABLE_get_number(INTERP, value);

        if (d == 0)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_DIV_BY_ZERO,
                "divide by zero");

        dest = Parrot_pmc_box_number(INTERP, SELF.get_integer() / d);
        return dest;
    }
}

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
