/* tclobject.pmc
 *  Copyright (C) 2001-2008, The Perl Foundation.
 *  SVN Info
 *     $Id: tclobject.pmc 29858 2008-07-29 18:34:44Z infinoid $
 *  Overview:
 *     These are the vtable functions for the tclobject base class
 *  Data Structure and Algorithms:
 *    The following primary native types exist that we wish to track:
 *    strings, integers, floats, lists {@array}, arrays, {%hash}.
 *    when parsing code, everything starts out as a string. When we ask
 *    for another representation, we do the conversion once and store it.
 *    this way, the next time it's needed, we can just return it. Several
 *    commands may generate a native type without first going through the
 *    string representation - by avoiding conversion to and from string,
 *    we can maintain a speed enhancement.
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/embed.h"
#include "pmc/pmc_string.h"
#include "pmc/pmc_integer.h"
#include "pmc/pmc_float.h"

static INTVAL dynpmc_TclString;
static INTVAL dynpmc_TclFloat;
static INTVAL dynpmc_TclInt;

pmclass TclObject dynpmc group tcl_group {
    void class_init() {
        if (pass) {
            dynpmc_TclString = pmc_type(INTERP,
                CONST_STRING(INTERP, "TclString"));
            dynpmc_TclInt    = pmc_type(INTERP,
                CONST_STRING(INTERP, "TclInt"));
            dynpmc_TclFloat  = pmc_type(INTERP,
                CONST_STRING(INTERP, "TclFloat"));
        }
    }

    void set_number_native(FLOATVAL value) {
        pmc_reuse(INTERP, SELF, dynpmc_TclFloat, 0);
        SETATTR_Float_fv(INTERP, SELF, value);
    }

    void set_integer_native(INTVAL value) {
        pmc_reuse(INTERP, SELF, dynpmc_TclInt, 0);
        SETATTR_Integer_iv(INTERP, SELF, value);
    }

    void set_string_native(STRING *value) {
        pmc_reuse(INTERP, SELF, dynpmc_TclString, 0);
        /* Only allow constant PMCs to embed constant strings */
        if (PObj_constant_TEST(SELF) && !PObj_constant_TEST(value)) {
            const char *copy  = Parrot_str_to_cstring(INTERP, value);
            SETATTR_String_str_val(INTERP, SELF, Parrot_str_new_constant(INTERP, copy));
        }
        else {
            SETATTR_String_str_val(INTERP, SELF, Parrot_str_copy(INTERP, value));
        }
    }
}

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
